from code import InteractiveConsole
import os
import pprint
import readline
import rlcompleter
import sys
from tempfile import mkstemp


class TermColours(dict):
    """
    Provides access to ANSI colour codes.
    """

    COLOUR_TEMPLATES = (("Black", "0;30"),
                        ("Red", "0;31"),
                        ("Green", "0;32"),
                        ("Brown", "0;33"),
                        ("Blue", "0;34"),
                        ("Purple", "0;35"),
                        ("Cyan", "0;36"),
                        ("LightGray", "0;37"),
                        ("DarkGray", "1;30"),
                        ("LightRed", "1;31"),
                        ("LightGreen", "1;32"),
                        ("Yellow", "1;33"),
                        ("LightBlue", "1;34"),
                        ("LightPurple", "1;35"),
                        ("LightCyan", "1;36"),
                        ("White", "1;37"),
                        ("Normal", "0"), )
    NO_COLOUR = ""
    BASE = "\001\033[%sm\002"

    def __init__(self):
        if os.environ.get("TERM") in ("xterm-color", "xterm-256color", "linux",
                                      "screen", "screen-256color", "screen-bce"
                                      ):
            self.update(dict((k, self.BASE % v)
                             for k, v in self.COLOUR_TEMPLATES))
        else:
            self.update(dict((k, self.NO_COLOUR)
                             for k, v in self.COLOUR_TEMPLATES))


def pprint_displayhook(value):
    """Enable pretty printing for stdout."""
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value
        pprint.pprint(value)


class EditableBufferInteractiveConsole(InteractiveConsole):
    """Start an external editor with \e."""

    EDITOR = os.environ.get("EDITOR", "vi")
    EDIT_CMD = "\e"

    def __init__(self, *args, **kwargs):
        self.last_buffer = []  # Last executed statement.
        InteractiveConsole.__init__(self, *args, **kwargs)

    def runsource(self, source, *args):
        self.last_buffer = [source.encode("UTF-8")]
        return InteractiveConsole.runsource(self, source, *args)

    def raw_input(self, *args):
        line = InteractiveConsole.raw_input(self, *args)
        if line == self.EDIT_CMD:
            fd, tmpfl = mkstemp(".py")
            os.write(fd, b"\n".join(self.last_buffer))
            os.close(fd)
            os.system(" ".join((self.EDITOR, tmpfl)))
            with open(tmpfl) as fh:
                line = fh.read()
            os.unlink(tmpfl)
            tmpfl = ""
            lines = line.split("\n")
            for i in range(len(lines) - 1):
                self.push(lines[i])
            line = lines[-1]
        return line

try:
    get_ipython
except NameError:
    colours = TermColours()
    readline.parse_and_bind("tab: complete")  # Add tab completion.
    sys.ps1 = "%s>>> %s" % (colours["Green"], colours["Normal"])
    sys.ps2 = "%s... %s" % (colours["Red"], colours["Normal"])
    sys.displayhook = pprint_displayhook
    c = EditableBufferInteractiveConsole(locals=locals())
    c.interact(banner="")
    sys.exit()

